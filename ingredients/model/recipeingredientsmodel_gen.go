// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	recipeIngredientsFieldNames          = builder.RawFieldNames(&RecipeIngredients{})
	recipeIngredientsRows                = strings.Join(recipeIngredientsFieldNames, ",")
	recipeIngredientsRowsExpectAutoSet   = strings.Join(stringx.Remove(recipeIngredientsFieldNames, "`recipe_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	recipeIngredientsRowsWithPlaceHolder = strings.Join(stringx.Remove(recipeIngredientsFieldNames, "`recipe_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	recipeIngredientsModel interface {
		Insert(ctx context.Context, data *RecipeIngredients) (sql.Result, error)
		FindOne(ctx context.Context, recipeId int64) (*RecipeIngredients, error)
		FindOneByRecipeIdIngredientId(ctx context.Context, recipeId int64, ingredientId sql.NullInt64) (*RecipeIngredients, error)
		Update(ctx context.Context, data *RecipeIngredients) error
		Delete(ctx context.Context, recipeId int64) error
	}

	defaultRecipeIngredientsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RecipeIngredients struct {
		RecipeId     int64         `db:"recipe_id"`     // 菜谱ID
		IngredientId sql.NullInt64 `db:"ingredient_id"` // 食材ID
	}
)

func newRecipeIngredientsModel(conn sqlx.SqlConn) *defaultRecipeIngredientsModel {
	return &defaultRecipeIngredientsModel{
		conn:  conn,
		table: "`recipe_ingredients`",
	}
}

func (m *defaultRecipeIngredientsModel) Delete(ctx context.Context, recipeId int64) error {
	query := fmt.Sprintf("delete from %s where `recipe_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, recipeId)
	return err
}

func (m *defaultRecipeIngredientsModel) FindOne(ctx context.Context, recipeId int64) (*RecipeIngredients, error) {
	query := fmt.Sprintf("select %s from %s where `recipe_id` = ? limit 1", recipeIngredientsRows, m.table)
	var resp RecipeIngredients
	err := m.conn.QueryRowCtx(ctx, &resp, query, recipeId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRecipeIngredientsModel) FindOneByRecipeIdIngredientId(ctx context.Context, recipeId int64, ingredientId sql.NullInt64) (*RecipeIngredients, error) {
	var resp RecipeIngredients
	query := fmt.Sprintf("select %s from %s where `recipe_id` = ? and `ingredient_id` = ? limit 1", recipeIngredientsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, recipeId, ingredientId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRecipeIngredientsModel) Insert(ctx context.Context, data *RecipeIngredients) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, recipeIngredientsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.IngredientId)
	return ret, err
}

func (m *defaultRecipeIngredientsModel) Update(ctx context.Context, newData *RecipeIngredients) error {
	query := fmt.Sprintf("update %s set %s where `recipe_id` = ?", m.table, recipeIngredientsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.IngredientId, newData.RecipeId)
	return err
}

func (m *defaultRecipeIngredientsModel) tableName() string {
	return m.table
}
