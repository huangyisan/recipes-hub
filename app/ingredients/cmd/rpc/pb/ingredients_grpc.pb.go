// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: ingredients.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IngredientClient is the client API for Ingredient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngredientClient interface {
	// 食材详情
	IngredientDetail(ctx context.Context, in *IngredientDetailReq, opts ...grpc.CallOption) (*IngredientDetailResp, error)
	// 食材列表
	IngredientList(ctx context.Context, in *IngredientListReq, opts ...grpc.CallOption) (*IngredientListResp, error)
	// 添加食材
	IngredientCreate(ctx context.Context, in *IngredientCreateReq, opts ...grpc.CallOption) (*IngredientCreateResp, error)
	// 食材列表all
	IngredientAll(ctx context.Context, in *IngredientAllReq, opts ...grpc.CallOption) (*IngredientAllResp, error)
}

type ingredientClient struct {
	cc grpc.ClientConnInterface
}

func NewIngredientClient(cc grpc.ClientConnInterface) IngredientClient {
	return &ingredientClient{cc}
}

func (c *ingredientClient) IngredientDetail(ctx context.Context, in *IngredientDetailReq, opts ...grpc.CallOption) (*IngredientDetailResp, error) {
	out := new(IngredientDetailResp)
	err := c.cc.Invoke(ctx, "/pb.ingredient/ingredientDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingredientClient) IngredientList(ctx context.Context, in *IngredientListReq, opts ...grpc.CallOption) (*IngredientListResp, error) {
	out := new(IngredientListResp)
	err := c.cc.Invoke(ctx, "/pb.ingredient/ingredientList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingredientClient) IngredientCreate(ctx context.Context, in *IngredientCreateReq, opts ...grpc.CallOption) (*IngredientCreateResp, error) {
	out := new(IngredientCreateResp)
	err := c.cc.Invoke(ctx, "/pb.ingredient/ingredientCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingredientClient) IngredientAll(ctx context.Context, in *IngredientAllReq, opts ...grpc.CallOption) (*IngredientAllResp, error) {
	out := new(IngredientAllResp)
	err := c.cc.Invoke(ctx, "/pb.ingredient/ingredientAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngredientServer is the server API for Ingredient service.
// All implementations must embed UnimplementedIngredientServer
// for forward compatibility
type IngredientServer interface {
	// 食材详情
	IngredientDetail(context.Context, *IngredientDetailReq) (*IngredientDetailResp, error)
	// 食材列表
	IngredientList(context.Context, *IngredientListReq) (*IngredientListResp, error)
	// 添加食材
	IngredientCreate(context.Context, *IngredientCreateReq) (*IngredientCreateResp, error)
	// 食材列表all
	IngredientAll(context.Context, *IngredientAllReq) (*IngredientAllResp, error)
	mustEmbedUnimplementedIngredientServer()
}

// UnimplementedIngredientServer must be embedded to have forward compatible implementations.
type UnimplementedIngredientServer struct {
}

func (UnimplementedIngredientServer) IngredientDetail(context.Context, *IngredientDetailReq) (*IngredientDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngredientDetail not implemented")
}
func (UnimplementedIngredientServer) IngredientList(context.Context, *IngredientListReq) (*IngredientListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngredientList not implemented")
}
func (UnimplementedIngredientServer) IngredientCreate(context.Context, *IngredientCreateReq) (*IngredientCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngredientCreate not implemented")
}
func (UnimplementedIngredientServer) IngredientAll(context.Context, *IngredientAllReq) (*IngredientAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngredientAll not implemented")
}
func (UnimplementedIngredientServer) mustEmbedUnimplementedIngredientServer() {}

// UnsafeIngredientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngredientServer will
// result in compilation errors.
type UnsafeIngredientServer interface {
	mustEmbedUnimplementedIngredientServer()
}

func RegisterIngredientServer(s grpc.ServiceRegistrar, srv IngredientServer) {
	s.RegisterService(&Ingredient_ServiceDesc, srv)
}

func _Ingredient_IngredientDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngredientDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngredientServer).IngredientDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ingredient/ingredientDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngredientServer).IngredientDetail(ctx, req.(*IngredientDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingredient_IngredientList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngredientListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngredientServer).IngredientList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ingredient/ingredientList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngredientServer).IngredientList(ctx, req.(*IngredientListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingredient_IngredientCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngredientCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngredientServer).IngredientCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ingredient/ingredientCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngredientServer).IngredientCreate(ctx, req.(*IngredientCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingredient_IngredientAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngredientAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngredientServer).IngredientAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ingredient/ingredientAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngredientServer).IngredientAll(ctx, req.(*IngredientAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ingredient_ServiceDesc is the grpc.ServiceDesc for Ingredient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ingredient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ingredient",
	HandlerType: (*IngredientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ingredientDetail",
			Handler:    _Ingredient_IngredientDetail_Handler,
		},
		{
			MethodName: "ingredientList",
			Handler:    _Ingredient_IngredientList_Handler,
		},
		{
			MethodName: "ingredientCreate",
			Handler:    _Ingredient_IngredientCreate_Handler,
		},
		{
			MethodName: "ingredientAll",
			Handler:    _Ingredient_IngredientAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ingredients.proto",
}
