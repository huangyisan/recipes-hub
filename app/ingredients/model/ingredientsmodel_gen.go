// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ingredientsFieldNames          = builder.RawFieldNames(&Ingredients{})
	ingredientsRows                = strings.Join(ingredientsFieldNames, ",")
	ingredientsRowsExpectAutoSet   = strings.Join(stringx.Remove(ingredientsFieldNames, "`ingredient_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ingredientsRowsWithPlaceHolder = strings.Join(stringx.Remove(ingredientsFieldNames, "`ingredient_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	ingredientsModel interface {
		Insert(ctx context.Context, data *Ingredients) (sql.Result, error)
		FindOne(ctx context.Context, ingredientId int64) (*Ingredients, error)
		FindOneByIngredientName(ctx context.Context, ingredientName string) (*Ingredients, error)
		Update(ctx context.Context, data *Ingredients) error
		Delete(ctx context.Context, ingredientId int64) error
	}

	defaultIngredientsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Ingredients struct {
		IngredientId           int64  `db:"ingredient_id"`            // 食材ID
		IngredientName         string `db:"ingredient_name"`          // 食材名称
		IngredientImageContent string `db:"ingredient_image_content"` // 食材图片地址
		IngredientDescription  string `db:"ingredient_description"`   // 食材描述
	}
)

func newIngredientsModel(conn sqlx.SqlConn) *defaultIngredientsModel {
	return &defaultIngredientsModel{
		conn:  conn,
		table: "`ingredients`",
	}
}

func (m *defaultIngredientsModel) Delete(ctx context.Context, ingredientId int64) error {
	query := fmt.Sprintf("delete from %s where `ingredient_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, ingredientId)
	return err
}

func (m *defaultIngredientsModel) FindOne(ctx context.Context, ingredientId int64) (*Ingredients, error) {
	query := fmt.Sprintf("select %s from %s where `ingredient_id` = ? limit 1", ingredientsRows, m.table)
	var resp Ingredients
	err := m.conn.QueryRowCtx(ctx, &resp, query, ingredientId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultIngredientsModel) FindOneByIngredientName(ctx context.Context, ingredientName string) (*Ingredients, error) {
	var resp Ingredients
	query := fmt.Sprintf("select %s from %s where `ingredient_name` = ? limit 1", ingredientsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, ingredientName)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultIngredientsModel) Insert(ctx context.Context, data *Ingredients) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, ingredientsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.IngredientName, data.IngredientImageContent, data.IngredientDescription)
	return ret, err
}

func (m *defaultIngredientsModel) Update(ctx context.Context, newData *Ingredients) error {
	query := fmt.Sprintf("update %s set %s where `ingredient_id` = ?", m.table, ingredientsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.IngredientName, newData.IngredientImageContent, newData.IngredientDescription, newData.IngredientId)
	return err
}

func (m *defaultIngredientsModel) tableName() string {
	return m.table
}
